Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/modules.xml	(date 1604866847145)
+++ .idea/modules.xml	(date 1604866847145)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/wPomodoro.iml" filepath="$PROJECT_DIR$/.idea/wPomodoro.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/codeStyles/codeStyleConfig.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/codeStyles/codeStyleConfig.xml	(date 1604866847152)
+++ .idea/codeStyles/codeStyleConfig.xml	(date 1604866847152)
@@ -0,0 +1,5 @@
+<component name="ProjectCodeStyleConfiguration">
+  <state>
+    <option name="PREFERRED_PROJECT_CODE_STYLE" value="Default" />
+  </state>
+</component>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/vcs.xml	(date 1604866847156)
+++ .idea/vcs.xml	(date 1604866847156)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: src/Components/Features/Timer/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { useEffect, useState } from \"react\";\n\ndeclare type pomodoroPhase = \"WORK\" | \"SHORT REST\" | \"LONG REST\";\n\n/**\n * Get the remaining time for a phase\n * @param startTime time this phase was started\n * @param totalPhaseTime total phase time in seconds\n */\nconst remainingTime = (startTime: number, totalPhaseTime: number) => {\n  return Math.floor(\n    (startTime + totalPhaseTime * 1000 - new Date().getTime()) / 1000\n  );\n};\n\n/**\n * Pomodoro timer hook\n * @param workingMinutes Length of the work period in minutes\n * @param repsBetweenRests Amount of reps between long rests\n * @param shortRestMinutes Length of short rest in minutes\n * @param longRestMinutes Length of long rest in minutes\n * @param phaseChangeCallback Callback on each phase change e.g work -> rest\n */\nexport const usePomodoroTimer = (\n  workingMinutes: number,\n  repsBetweenRests: number,\n  shortRestMinutes: number,\n  longRestMinutes: number,\n  phaseChangeCallback: (newPhase: pomodoroPhase) => void\n) => {\n  const [isRunning, setIsRunning] = useState(false);\n  const [phase, setPhase] = useState<pomodoroPhase>(\"WORK\");\n  const [startTime, setStartTime] = useState(new Date().getTime());\n  const [currentRep, setCurrentRep] = useState(0);\n  const [pomodoros, setPomodoros] = useState(0);\n  const [timeLeft, setTimeLeft] = useState(\n    remainingTime(startTime, workingMinutes * 60)\n  );\n  const [pauseTimeLeft, setPauseTimeLeft] = useState(0);\n\n  const toggleIsRunning = () => {\n    if (!isRunning) {\n      setStartTime(new Date().getTime());\n    } else {\n      setPauseTimeLeft(timeLeft);\n    }\n    setIsRunning(!isRunning);\n  };\n\n  const restartPhase = () => {\n    setIsRunning(false);\n    switch (phase) {\n      case \"WORK\":\n        setPauseTimeLeft(0);\n        setTimeLeft(remainingTime(new Date().getTime(), workingMinutes * 60));\n        break;\n      case \"SHORT REST\":\n        setPauseTimeLeft(0);\n        setTimeLeft(remainingTime(new Date().getTime(), shortRestMinutes * 60));\n        break;\n      case \"LONG REST\":\n        setPauseTimeLeft(0);\n        setTimeLeft(remainingTime(new Date().getTime(), longRestMinutes * 60));\n        break;\n    }\n  };\n\n  const nextPhase = () => {\n    setIsRunning(false);\n    switch (phase) {\n      case \"WORK\":\n        setPauseTimeLeft(0);\n        if (currentRep + 1 >= repsBetweenRests) {\n          setTimeLeft(\n            remainingTime(new Date().getTime(), longRestMinutes * 60)\n          );\n          phaseChangeCallback(\"LONG REST\");\n          setPhase(\"LONG REST\");\n        } else {\n          phaseChangeCallback(\"SHORT REST\");\n          setTimeLeft(\n            remainingTime(new Date().getTime(), shortRestMinutes * 60)\n          );\n          setPhase(\"SHORT REST\");\n        }\n        break;\n      case \"SHORT REST\":\n        setPauseTimeLeft(0);\n        setTimeLeft(remainingTime(new Date().getTime(), shortRestMinutes * 60));\n        phaseChangeCallback(\"WORK\");\n        setStartTime(new Date().getTime());\n        setPhase(\"WORK\");\n        break;\n      case \"LONG REST\":\n        setPauseTimeLeft(0);\n        setTimeLeft(remainingTime(new Date().getTime(), longRestMinutes * 60));\n        phaseChangeCallback(\"WORK\");\n        setStartTime(new Date().getTime());\n        setPhase(\"WORK\");\n        break;\n    }\n  };\n\n  useEffect(() => {\n    let timeout: any;\n    let remaining: number;\n    if (isRunning) {\n      switch (phase) {\n        case \"WORK\":\n          remaining = remainingTime(\n            startTime,\n            pauseTimeLeft > 0 ? pauseTimeLeft : workingMinutes * 60\n          );\n          if (remaining >= 0) {\n            timeout = setTimeout(() => {\n              setTimeLeft(remaining);\n            }, 1000);\n          } else {\n            setStartTime(new Date().getTime());\n            if (currentRep + 1 >= repsBetweenRests) {\n              setPauseTimeLeft(0);\n              phaseChangeCallback(\"LONG REST\");\n              setPhase(\"LONG REST\");\n              setCurrentRep(currentRep + 1);\n            } else {\n              phaseChangeCallback(\"SHORT REST\");\n              setPhase(\"SHORT REST\");\n              setCurrentRep(currentRep + 1);\n            }\n          }\n          break;\n        case \"SHORT REST\":\n          remaining = remainingTime(\n            startTime,\n            pauseTimeLeft > 0 ? pauseTimeLeft : shortRestMinutes * 60\n          );\n          if (remaining >= 0) {\n            timeout = setTimeout(() => {\n              setTimeLeft(remaining);\n            }, 1000);\n          } else {\n            setPauseTimeLeft(0);\n            phaseChangeCallback(\"WORK\");\n            setStartTime(new Date().getTime());\n            setPhase(\"WORK\");\n          }\n          break;\n        case \"LONG REST\":\n          remaining = remainingTime(\n            startTime,\n            pauseTimeLeft > 0 ? pauseTimeLeft : longRestMinutes * 60\n          );\n          if (remaining >= 0) {\n            timeout = setTimeout(() => {\n              setTimeLeft(remaining);\n            }, 1000);\n          } else {\n            setPauseTimeLeft(0);\n            phaseChangeCallback(\"WORK\");\n            setStartTime(new Date().getTime());\n            setCurrentRep(0);\n            setPomodoros(pomodoros + 1);\n            setPhase(\"WORK\");\n          }\n          break;\n      }\n    }\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  });\n\n  return [\n    phase,\n    timeLeft,\n    pomodoros,\n    currentRep,\n    isRunning,\n    toggleIsRunning,\n    restartPhase,\n    nextPhase,\n  ] as const;\n};\n\nexport default usePomodoroTimer;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Components/Features/Timer/index.tsx	(revision 7460e23898bbc4331efbaeadfbe8c16e536549ba)
+++ src/Components/Features/Timer/index.tsx	(date 1604872847187)
@@ -1,4 +1,5 @@
 import { useEffect, useState } from "react";
+import { start } from "repl";
 
 declare type pomodoroPhase = "WORK" | "SHORT REST" | "LONG REST";
 
@@ -8,9 +9,7 @@
  * @param totalPhaseTime total phase time in seconds
  */
 const remainingTime = (startTime: number, totalPhaseTime: number) => {
-  return Math.floor(
-    (startTime + totalPhaseTime * 1000 - new Date().getTime()) / 1000
-  );
+  return Math.floor((startTime + totalPhaseTime * 1000 - Date.now()) / 1000);
 };
 
 /**
@@ -30,7 +29,7 @@
 ) => {
   const [isRunning, setIsRunning] = useState(false);
   const [phase, setPhase] = useState<pomodoroPhase>("WORK");
-  const [startTime, setStartTime] = useState(new Date().getTime());
+  const [startTime, setStartTime] = useState(Date.now());
   const [currentRep, setCurrentRep] = useState(0);
   const [pomodoros, setPomodoros] = useState(0);
   const [timeLeft, setTimeLeft] = useState(
@@ -40,7 +39,7 @@
 
   const toggleIsRunning = () => {
     if (!isRunning) {
-      setStartTime(new Date().getTime());
+      setStartTime(Date.now());
     } else {
       setPauseTimeLeft(timeLeft);
     }
@@ -52,15 +51,15 @@
     switch (phase) {
       case "WORK":
         setPauseTimeLeft(0);
-        setTimeLeft(remainingTime(new Date().getTime(), workingMinutes * 60));
+        setTimeLeft(remainingTime(Date.now(), workingMinutes * 60));
         break;
       case "SHORT REST":
         setPauseTimeLeft(0);
-        setTimeLeft(remainingTime(new Date().getTime(), shortRestMinutes * 60));
+        setTimeLeft(remainingTime(Date.now(), shortRestMinutes * 60));
         break;
       case "LONG REST":
         setPauseTimeLeft(0);
-        setTimeLeft(remainingTime(new Date().getTime(), longRestMinutes * 60));
+        setTimeLeft(remainingTime(Date.now(), longRestMinutes * 60));
         break;
     }
   };
@@ -71,31 +70,27 @@
       case "WORK":
         setPauseTimeLeft(0);
         if (currentRep + 1 >= repsBetweenRests) {
-          setTimeLeft(
-            remainingTime(new Date().getTime(), longRestMinutes * 60)
-          );
+          setTimeLeft(remainingTime(Date.now(), longRestMinutes * 60));
           phaseChangeCallback("LONG REST");
           setPhase("LONG REST");
         } else {
           phaseChangeCallback("SHORT REST");
-          setTimeLeft(
-            remainingTime(new Date().getTime(), shortRestMinutes * 60)
-          );
+          setTimeLeft(remainingTime(Date.now(), shortRestMinutes * 60));
           setPhase("SHORT REST");
         }
         break;
       case "SHORT REST":
         setPauseTimeLeft(0);
-        setTimeLeft(remainingTime(new Date().getTime(), shortRestMinutes * 60));
+        setTimeLeft(remainingTime(Date.now(), shortRestMinutes * 60));
         phaseChangeCallback("WORK");
-        setStartTime(new Date().getTime());
+        setStartTime(Date.now());
         setPhase("WORK");
         break;
       case "LONG REST":
         setPauseTimeLeft(0);
-        setTimeLeft(remainingTime(new Date().getTime(), longRestMinutes * 60));
+        setTimeLeft(remainingTime(Date.now(), longRestMinutes * 60));
         phaseChangeCallback("WORK");
-        setStartTime(new Date().getTime());
+        setStartTime(Date.now());
         setPhase("WORK");
         break;
     }
@@ -116,7 +111,7 @@
               setTimeLeft(remaining);
             }, 1000);
           } else {
-            setStartTime(new Date().getTime());
+            setStartTime(Date.now());
             if (currentRep + 1 >= repsBetweenRests) {
               setPauseTimeLeft(0);
               phaseChangeCallback("LONG REST");
@@ -141,7 +136,7 @@
           } else {
             setPauseTimeLeft(0);
             phaseChangeCallback("WORK");
-            setStartTime(new Date().getTime());
+            setStartTime(Date.now());
             setPhase("WORK");
           }
           break;
@@ -157,7 +152,7 @@
           } else {
             setPauseTimeLeft(0);
             phaseChangeCallback("WORK");
-            setStartTime(new Date().getTime());
+            setStartTime(Date.now());
             setCurrentRep(0);
             setPomodoros(pomodoros + 1);
             setPhase("WORK");
@@ -169,7 +164,19 @@
     return () => {
       clearTimeout(timeout);
     };
-  });
+  }, [
+    currentRep,
+    isRunning,
+    longRestMinutes,
+    pauseTimeLeft,
+    phase,
+    phaseChangeCallback,
+    pomodoros,
+    repsBetweenRests,
+    shortRestMinutes,
+    startTime,
+    workingMinutes,
+  ]);
 
   return [
     phase,
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/.gitignore	(date 1604866848236)
+++ .idea/.gitignore	(date 1604866848236)
@@ -0,0 +1,5 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Editor-based HTTP Client requests
+/httpRequests/
Index: .idea/inspectionProfiles/Project_Default.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/inspectionProfiles/Project_Default.xml	(date 1604866847115)
+++ .idea/inspectionProfiles/Project_Default.xml	(date 1604866847115)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <profile version="1.0">
+    <option name="myName" value="Project Default" />
+    <inspection_tool class="Eslint" enabled="true" level="WARNING" enabled_by_default="true" />
+  </profile>
+</component>
\ No newline at end of file
Index: .idea/prettier.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/prettier.xml	(date 1604867802232)
+++ .idea/prettier.xml	(date 1604867802232)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="PrettierConfiguration">
+    <option name="myRunOnSave" value="true" />
+    <option name="myRunOnReformat" value="true" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/wPomodoro.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/wPomodoro.iml	(date 1604866847136)
+++ .idea/wPomodoro.iml	(date 1604866847136)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="WEB_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$">
+      <excludeFolder url="file://$MODULE_DIR$/.tmp" />
+      <excludeFolder url="file://$MODULE_DIR$/temp" />
+      <excludeFolder url="file://$MODULE_DIR$/tmp" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: src/Components/Pages/Timer.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {\n  Button,\n  Card,\n  Grid,\n  LinearProgress,\n  makeStyles,\n  Typography,\n  Tooltip,\n} from \"@material-ui/core\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\nimport PauseIcon from \"@material-ui/icons/Pause\";\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { AppContext } from \"../../Contexts/ApplicationContext\";\nimport usePomodoroTimer from \"../Features/Timer\";\nimport SkipPreviousIcon from \"@material-ui/icons/SkipPrevious\";\nimport SkipNextIcon from \"@material-ui/icons/SkipNext\";\n\nconst useStyles = makeStyles({\n  Center: {\n    textAlign: \"center\",\n  },\n  customProgress:{\n      height:\"1rem\",\n      marginBottom:\"0.5rem\",\n      marginRight:\"1rem\",\n      marginLeft:\"1rem\",\n      backgroundColor:\"red\",\n      borderRadius:\"20px\"\n  }\n});\n\nconst formatTimeString = (seconds: number) => {\n  const minutes = Math.floor(seconds / 60);\n  seconds = seconds - minutes * 60;\n  return `${minutes < 1 ? \"00\" : minutes < 10 ? `0${minutes}` : `${minutes}`}:${\n    seconds < 1 ? \"00\" : seconds < 10 ? `0${seconds}` : `${seconds}`\n  }`;\n};\n\nconst getProgress = (remainingTime: number, totalTime: number) => {\n  const elapsedTime = totalTime - remainingTime;\n  return (elapsedTime / totalTime) * 100;\n};\n\ntype statProps = {\n  workPeriods: number;\n  pomodoros: number;\n  workTime: number;\n  workReps: number;\n};\n\nconst Stats = (props: statProps) => {\n  const classes = useStyles();\n  return (\n    <Grid container spacing={1} className={classes.Center}>\n      <Grid item xs={12}>\n        <Typography variant=\"h6\">\n          Completed {props.pomodoros} pomodoros\n        </Typography>\n      </Grid>\n      <Grid item xs={12}>\n        <Typography variant=\"h6\">\n          Completed {props.pomodoros * props.workPeriods + props.workPeriods}{\" \"}\n          work periods\n        </Typography>\n      </Grid>\n      <Grid item xs={12}>\n        <Typography variant=\"h6\">\n          Worked effectively for{\" \"}\n          {props.pomodoros * props.workReps * props.workTime +\n            props.workPeriods * props.workTime}{\" \"}\n          minutes\n        </Typography>\n      </Grid>\n    </Grid>\n  );\n};\n\nconst Timer = (props: any) => {\n  const classes = useStyles();\n  const context = useContext(AppContext);\n  const chime = new Audio(\"/Chime.wav\");\n  const [progress, setProgress] = useState(0);\n\n  const [\n    phase,\n    timeLeft,\n    pomodoros,\n    currentRep,\n    isRunning,\n    toggleIsRunning,\n    restartPhase,\n    nextPhase,\n  ] = usePomodoroTimer(\n    context.pomodoroSettings.workingMinutes,\n    context.pomodoroSettings.workRepsBetweenRests,\n    context.pomodoroSettings.shortRestMinutes,\n    context.pomodoroSettings.longRestMinutes,\n    (newPhase: any) => {\n      chime.play()\n      .catch(() => {\n          alert(\"You need to explicitly allow audio on your browser to hear chimes! :)\")\n      });\n    }\n  );\n\n  useEffect(() => {\n    switch (phase) {\n      case \"WORK\":\n        setProgress(\n          getProgress(timeLeft, context.pomodoroSettings.workingMinutes * 60)\n        );\n        break;\n      case \"SHORT REST\":\n        setProgress(\n          getProgress(timeLeft, context.pomodoroSettings.shortRestMinutes * 60)\n        );\n        break;\n      case \"LONG REST\":\n        setProgress(\n          getProgress(timeLeft, context.pomodoroSettings.longRestMinutes * 60)\n        );\n        break;\n    }\n  }, [timeLeft]);\n\n  return (\n    <Grid container spacing={2}>\n      <Grid item xs={12} className={classes.Center}>\n        <Card variant=\"elevation\">\n          <Typography variant=\"h3\">{isRunning ? phase : \"PAUSED\"}</Typography>\n        </Card>\n      </Grid>\n      <Grid item xs={12}>\n        <Card variant=\"elevation\" className={classes.Center}>\n          <Typography variant=\"h1\">{formatTimeString(timeLeft)}</Typography>\n          <LinearProgress className={classes.customProgress} variant=\"determinate\" value={progress} />\n        </Card>\n      </Grid>\n      <Grid item xs={12}>\n        <Card variant=\"elevation\">\n          <Stats\n            workPeriods={currentRep}\n            pomodoros={pomodoros}\n            workTime={context.pomodoroSettings.workingMinutes}\n            workReps={context.pomodoroSettings.workRepsBetweenRests}\n          />\n        </Card>\n      </Grid>\n      <Grid item xs={4} className={classes.Center}>\n        <Tooltip title=\"Restart this phase\" aria-label=\"Restart this phase\">\n          <Button\n            color=\"primary\"\n            variant=\"contained\"\n            onClick={() => {\n              restartPhase();\n            }}\n          >\n            <SkipPreviousIcon />\n          </Button>\n        </Tooltip>\n      </Grid>\n      <Grid item xs={4} className={classes.Center}>\n        <Tooltip title=\"Pause\" aria-label=\"Pause\">\n          <Button\n            color=\"primary\"\n            variant=\"contained\"\n            onClick={() => {\n              toggleIsRunning();\n            }}\n          >\n            {isRunning ? <PauseIcon /> : <PlayArrowIcon />}\n          </Button>\n        </Tooltip>\n      </Grid>\n      <Grid item xs={4} className={classes.Center}>\n        <Tooltip title=\"Go to next phase\" aria-label=\"Go to next phase\">\n          <Button\n            color=\"primary\"\n            variant=\"contained\"\n            onClick={() => {\n              nextPhase();\n            }}\n          >\n            <SkipNextIcon />\n          </Button>\n        </Tooltip>\n      </Grid>\n      <Grid item xs={12} className={classes.Center}>\n        <Tooltip title=\"Back to setup\" aria-label=\"Back to setup\">\n          <Button color=\"secondary\" variant=\"contained\" component={Link} to=\"/\">\n            <ExitToAppIcon />\n          </Button>\n        </Tooltip>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Timer;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Components/Pages/Timer.tsx	(revision 7460e23898bbc4331efbaeadfbe8c16e536549ba)
+++ src/Components/Pages/Timer.tsx	(date 1604872857820)
@@ -21,14 +21,14 @@
   Center: {
     textAlign: "center",
   },
-  customProgress:{
-      height:"1rem",
-      marginBottom:"0.5rem",
-      marginRight:"1rem",
-      marginLeft:"1rem",
-      backgroundColor:"red",
-      borderRadius:"20px"
-  }
+  customProgress: {
+    height: "1rem",
+    marginBottom: "0.5rem",
+    marginRight: "1rem",
+    marginLeft: "1rem",
+    backgroundColor: "red",
+    borderRadius: "20px",
+  },
 });
 
 const formatTimeString = (seconds: number) => {
@@ -77,11 +77,11 @@
     </Grid>
   );
 };
+const chime = new Audio("/Chime.wav");
 
 const Timer = (props: any) => {
   const classes = useStyles();
   const context = useContext(AppContext);
-  const chime = new Audio("/Chime.wav");
   const [progress, setProgress] = useState(0);
 
   const [
@@ -99,9 +99,10 @@
     context.pomodoroSettings.shortRestMinutes,
     context.pomodoroSettings.longRestMinutes,
     (newPhase: any) => {
-      chime.play()
-      .catch(() => {
-          alert("You need to explicitly allow audio on your browser to hear chimes! :)")
+      chime.play().catch(() => {
+        alert(
+          "You need to explicitly allow audio on your browser to hear chimes! :)"
+        );
       });
     }
   );
@@ -124,7 +125,7 @@
         );
         break;
     }
-  }, [timeLeft]);
+  }, [timeLeft, context, phase]);
 
   return (
     <Grid container spacing={2}>
@@ -136,7 +137,7 @@
       <Grid item xs={12}>
         <Card variant="elevation" className={classes.Center}>
           <Typography variant="h1">{formatTimeString(timeLeft)}</Typography>
-          <LinearProgress className={classes.customProgress} variant="determinate" value={progress} />
+          {/*<LinearProgress className={classes.customProgress} variant="determinate" value={progress} />*/}
         </Card>
       </Grid>
       <Grid item xs={12}>
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(date 1604866847140)
+++ .idea/misc.xml	(date 1604866847140)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="JavaScriptSettings">
+    <option name="languageLevel" value="JSX" />
+  </component>
+</project>
\ No newline at end of file
